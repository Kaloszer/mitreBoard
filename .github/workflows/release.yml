name: Release

on:
  push:
    branches:
      - main # Trigger on push to main branch

jobs:
  determine-version:
    name: Determine Next Version
    runs-on: ubuntu-latest
    permissions:
      contents: read # Need read access to fetch tags
    outputs:
      new_tag: ${{ steps.version.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all tags

      - name: Calculate next version
        id: version
        run: |
          git fetch --tags # Ensure all tags are fetched
          # Get the latest tag matching v*.*.*, default to v0.0.0 if none exists
          latest_tag=$(git describe --tags --abbrev=0 --match "v*.*.*" 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"

          # Remove 'v' prefix
          version_parts=$(echo "${latest_tag#v}" | tr '.' '\n')
          major=$(echo "$version_parts" | sed -n 1p)
          minor=$(echo "$version_parts" | sed -n 2p)
          patch=$(echo "$version_parts" | sed -n 3p)

          # Increment patch version
          new_patch=$((patch + 1))
          new_tag="v${major}.${minor}.${new_patch}"
          echo "New tag: $new_tag"

          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

  build:
    name: Build Application
    needs: determine-version # Wait for version determination
    runs-on: ubuntu-latest
    outputs:
      build_dir: ${{ steps.build.outputs.build_dir }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install --frozen-lockfile
        working-directory: ./mitre-board-app

      - name: Build application (frontend and server)
        id: build
        run: |
          bun run build
          echo "build_dir=$(pwd)" >> $GITHUB_OUTPUT
        working-directory: ./mitre-board-app

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            ${{ steps.build.outputs.build_dir }}/mitre-board-*
            ${{ steps.build.outputs.build_dir }}/dist/
            ${{ steps.build.outputs.build_dir }}/public/
          retention-days: 1

  package-release:
    name: Package and Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: linux-arm64
            binary_suffix: linux-arm64
            output_name: mitre-board
            archive_cmd: tar -czvf mitre-board-linux-arm64.tar.gz -C release-linux-arm64 .
            archive_name: mitre-board-linux-arm64.tar.gz
          - target: linux-x64-modern
            binary_suffix: linux-x64-modern
            output_name: mitre-board
            archive_cmd: tar -czvf mitre-board-linux-x64-modern.tar.gz -C release-linux-x64-modern .
            archive_name: mitre-board-linux-x64-modern.tar.gz
          - target: windows-x64-modern
            binary_suffix: windows-x64-modern.exe
            output_name: mitre-board.exe
            archive_cmd: cd release-windows-x64-modern && zip -r ../mitre-board-windows-x64-modern.zip .
            archive_name: mitre-board-windows-x64-modern.zip
          - target: mac-x64
            binary_suffix: mac-x64
            output_name: mitre-board
            archive_cmd: tar -czvf mitre-board-mac-x64.tar.gz -C release-mac-x64 .
            archive_name: mitre-board-mac-x64.tar.gz
          - target: mac-arm64
            binary_suffix: mac-arm64
            output_name: mitre-board
            archive_cmd: tar -czvf mitre-board-mac-arm64.tar.gz -C release-mac-arm64 .
            archive_name: mitre-board-mac-arm64.tar.gz

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build-output

      - name: Prepare artifact archive (${{ matrix.target }})
        run: |
          RELEASE_DIR="release-${{ matrix.target }}"
          mkdir -p $RELEASE_DIR/public # Create public directory
          cp build-output/mitre-board-${{ matrix.binary_suffix }} $RELEASE_DIR/${{ matrix.output_name }}
          cp build-output/public/index.html $RELEASE_DIR/public/ # Copy index.html into public
          cp -r build-output/dist $RELEASE_DIR/
          ${{ matrix.archive_cmd }}

      - name: Upload Release Asset (${{ matrix.target }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive_name }} # Use the actual archive name as artifact name
          path: ${{ matrix.archive_name }}
          retention-days: 1

  release:
    name: Create GitHub Release
    needs: [package-release, determine-version] # Wait for packaging and version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          # merge-multiple: true # Keep this, might still be useful depending on download structure

      - name: List downloaded assets
        run: ls -R release-assets

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.determine-version.outputs.new_tag }}
          name: Release ${{ needs.determine-version.outputs.new_tag }}
          files: |
            release-assets/*.tar.gz
            release-assets/*.zip
          make_latest: true

      - name: Push new Git tag
        run: |
          git tag ${{ needs.determine-version.outputs.new_tag }}
          git push origin ${{ needs.determine-version.outputs.new_tag }}
